fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
install.packages("ggplot2")
library(caret)
install.packages("scales")
install.packages("scales")
library(caret)
install.packages('caret', dependencies = TRUE)
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
setwd("~/GitHub/SDA")
library(corrplot)
library(caTools)
library(tidyverse)
library(caret)
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
attach(data_complete)
attach(data_complete)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
confint(model, level=.95)
resid <- model_reduced_collinearity$residuals
hist(resid)
# I residui devono avere distribuzione gaussiana:
resid <- model$residuals
hist(resid)
yfit<-fitted(model)
plot(yfit, abs(resid), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot.new()
boxplot(tr_s)$co2_emission
Q <- quantile(tr_s$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(tr_s$engine_capacity)
up <-  Q[2]+1*iqr # Upper Range
low<- Q[1]-1*iqr # Lower Range
eliminated<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$fuel_cost_6000_miles, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(eliminated$fuel_cost_6000_miles)
up <-  Q[2]+iqr # Upper Range
low<- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$fuel_cost_6000_miles> low & eliminated$fuel_cost_6000_miles< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$noise_level, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(eliminated$noise_level)
up <-  Q[2]+iqr # Upper Range
low <- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$noise_level> low & eliminated$noise_level< up)
boxplot(eliminated)$co2_emission
model_without_outliers <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = eliminated)
summary(model_without_outliers)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
car::vif(model_without_outliers)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = eliminated)
summary(model_reduced_collinearity)
confint(model_reduced_collinearity, level=.95)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
car::vif(model_without_outliers)
model_without_outliers
summary(model_without_outliers)
View(eliminated)
eliminated<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$fuel_cost_6000_miles, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(eliminated$fuel_cost_6000_miles)
up <-  Q[2]+iqr # Upper Range
low<- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$fuel_cost_6000_miles> low & eliminated$fuel_cost_6000_miles< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$noise_level, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(eliminated$noise_level)
up <-  Q[2]+iqr # Upper Range
low <- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$noise_level> low & eliminated$noise_level< up)
boxplot(eliminated)$co2_emission
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
summary(model_without_outliers)
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
summary(model_without_outliers)
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
summary(model_without_outliers)
car::vif(model_without_outliers)
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
View(eliminated)
eliminated<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(eliminated)$co2_emission
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
attach(data_complete)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
resid <- model$residuals
hist(resid)
yfit<-fitted(model)
plot(yfit, abs(resid), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot.new()
boxplot(tr_s)$co2_emission
Q <- quantile(View$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
Q <- quantile(tr_S$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
Q <- quantile(tr_s$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(tr_s$engine_capacity)
up <-  Q[2]+1*iqr # Upper Range
low<- Q[1]-1*iqr # Lower Range
eliminated<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$fuel_cost_6000_miles, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(eliminated$fuel_cost_6000_miles)
up <-  Q[2]+iqr # Upper Range
low<- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$fuel_cost_6000_miles> low & eliminated$fuel_cost_6000_miles< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$noise_level, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(eliminated$noise_level)
up <-  Q[2]+iqr # Upper Range
low <- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$noise_level> low & eliminated$noise_level< up)
boxplot(eliminated)$co2_emission
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
summary(model_without_outliers)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
car::vif(model_without_outliers)
confint(model_without_outliers, level=.95)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles  + noise_level, data = eliminated)
car::vif(model_reduced_collinearity)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = eliminated)
car::vif(model_reduced_collinearity)
train.control <- trainControl(method = "cv", number = 10)
train_control <- trainControl(method = "cv", number = 10)
library(caret)
install.packages("vctrs")
install.packages("vctrs")
library(caret)
update.packages("vctrs")
library(caret)
update.packages("vctrs")
library(caret)
install.packages("caret")
library(caret)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(caret)
library(corrplot)
library(caTools)
library(tidyverse)
library(caret)
library(ISLR)
installed.packages("tidyr")
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
attach(data_complete)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
confint(model, level=.95)
resid <- model$residuals
hist(resid)
plot.new()
boxplot(tr_s)$co2_emission
##metodo IQR per trovare gli outlier:
## restituzione del 25 esimo e 75 esimo percentile del set di dati
Q <- quantile(tr_s$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(tr_s$engine_capacity)
## ci calcoliamo gli intervalli oltre i quali tutti i punti sono outlier
up <-  Q[2]+1*iqr # Upper Range
low<- Q[1]-1*iqr # Lower Range
# ==============================================================
#ELIMINAZIONE OUTLIER
# ==============================================================
eliminated<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$fuel_cost_6000_miles, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(eliminated$fuel_cost_6000_miles)
up <-  Q[2]+iqr # Upper Range
low<- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$fuel_cost_6000_miles> low & eliminated$fuel_cost_6000_miles< up)
boxplot(eliminated)$co2_emission
Q <- quantile(eliminated$noise_level, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(eliminated$noise_level)
up <-  Q[2]+iqr # Upper Range
low <- Q[1]-iqr # Lower Range
eliminated<- subset(eliminated, eliminated$noise_level> low & eliminated$noise_level< up)
boxplot(eliminated)$co2_emission
model_without_outliers <- lm(co2_emission ~ ., data = eliminated)
summary(model_without_outliers)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
car::vif(model_without_outliers)
# DOPO LE RIFLESSIONI: sono stati eliminati i regressori che presentano un VIF oltre i 10 e che sono in correlazione con altri regressori con VIF minore di 10.
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles  + noise_level, data = eliminated)
summary(model_reduced_collinearity)
confint(model_reduced_collinearity, level=.95)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
train_control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
summary(model_Validation)
summary(model_validation)
train.control <- trainControl(method = "cv", number = 5)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
summary(model_validation)
train.control <- trainControl(method = "cv", number = 5)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data = eliminated, method = "lm",
trControl = train.control)
summary(model_validation)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + combined_metric  + noise_level, data = eliminated)
summary(model_reduced_collinearity)
confint(model_reduced_collinearity, level=.95)
train.control <- trainControl(method = "cv", number = 5)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + combined_metric + noise_level, data = eliminated, method = "lm",
trControl = train.control)
summary(model_validation)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric  + noise_level, data = eliminated)
summary(model_reduced_collinearity)
confint(model_reduced_collinearity, level=.95)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# ==============================================================
# k-FOLD CROSS VALIDATION
# ==============================================================
train.control <- trainControl(method = "cv", number = 5)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric + noise_level, data = eliminated, method = "lm",
trControl = train.control)
summary(model_validation)
# DOPO LE RIFLESSIONI: sono stati eliminati i regressori che presentano un VIF oltre i 10 e che sono in correlazione con altri regressori con VIF minore di 10.
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric  + noise_level, data = eliminated)
summary(model_reduced_collinearity)
confint(model_reduced_collinearity, level=.95)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# ==============================================================
# k-FOLD CROSS VALIDATION
# ==============================================================
train.control <- trainControl(method = "cv", number = 5)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = eliminated, method = "lm",
trControl = train.control)
summary(model_validation)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
train.control <- trainControl(method = "cv", number = 5)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data = eliminated, method = "lm",
trControl = train.control)
summary(model_validation)
y_pred = predict(model_validation, newdata = t_s)
y_pred
View(t_s)
View(t_s)
y_pred = predict(model_validation, newdata = t_s, interval = "predict")
y_pred
y_pred %*% c(0, -1, 1)
y_pred = predict(model_validation, newdata = t_s, interval = "prediction")
y_pred
y_pred %*% c(0, -1, 1)
summary(y_pred)
y_pred = predict(model_validation, newdata = t_s, interval = 'prediction')
summary(y_pred)
y_pred[1]
y_pred[1,1,1]
y_pred = predict(model_validation, newdata = t_s, interval = 'predict')
y_pred
summary(y_pred)
summary(y_pred[1])
y_pred = predict(model_validation, newdata = t_s[1], interval = 'predict')
y_pred = predict(model_validation, newdata = t_s, interval = 'confidence')
y_pred
summary(y_pred)
y_pred[1]
y_pred[1,]
y_pred[,1]
y_pred[c(1,1,1)]
y_pred[c(1,2,3)]
confint(y_pred)
y_pred = predict(model_validation, newdata = t_s, interval = 'confidence')
y_pred[interval]
pred.int <- predict(model_validation, interval = "prediction")
mydata <- cbind(eliminated, pred.int)
mydata
p <- ggplot(mydata, aes(speed, dist)) +
geom_point() +
stat_smooth(method = lm)
# 3. Add prediction intervals
p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
library("ggplot2")
p <- ggplot(mydata, aes(speed, dist)) +
geom_point() +
stat_smooth(method = lm)
# 3. Add prediction intervals
p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
p <- ggplot(mydata, aes(co2_emission, year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level)) +
geom_point() +
stat_smooth(method = lm)
# 3. Add prediction intervals
p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
y_pred = predict(model_validation, newdata = t_s, interval = 'confidence')
confint(model_validation)
=============================
y_pred = predict(model_validation, newdata = t_s, interval = 'confidence')
confint(model_validation,level=.95)
print(y_pred)
plot(y_pred)
library(MASS)
step.model <- stepAIC(model_reduced_collinearity, direction = "backward", trace = FALSE)
summary(step.model)
step.model <- stepAIC(model_reduced_collinearity, direction = "both", trace = FALSE)
summary(step.model)
step.model <- stepAIC(model_reduced_collinearity, direction = "backward", trace = FALSE)
summary(step.model)
confint(step.model, level=.95)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles  + noise_level, data = eliminated)
step.model <- stepAIC(model_reduced_collinearity, direction = "backward", trace = FALSE)
summary(step.model)
confint(step.model, level=.95)
y_pred_step_model = predict(step.model, newdata = t_s, interval = 'confidence')
plot(y_pred_step_model)
y_pred_validation = predict(model_validation, newdata = t_s, interval = 'confidence')
plot(y_pred_validation)
y_pred_step_model = predict(step.model, newdata = t_s, interval = 'confidence')
plot(y_pred_step_model)
y_pred_validation = predict(model_validation, newdata = t_s, interval = 'confidence')
plot(y_pred_validation)
y_pred_step_model = predict(step.model, newdata = t_s, interval = 'confidence')
plot(y_pred_step_model)
step.model <- stepAIC(model_reduced_collinearity, direction = "backward", scope = formula(model_reduced_collinearity), trace = FALSE)
summary(step.model)
confint(step.model, level=.95)
step.model$anova
step.model <- stepAIC(model_reduced_collinearity, direction = "both", scope = formula(model_reduced_collinearity), trace = FALSE)
summary(step.model)
step.model$anova
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data = eliminated, method = "lm",
trControl = train.control)
summary(model_validation)
sample(1:100, 100/2)
len(sample())
len(sample
len(sample)
mean(((mpg-predict(model_validation,eliminated))[eliminated])^2)
n = nrow(t_s)
test = sample(1:n, n/2)
mean(((mpg-predict(model_validation,t_s))[-test])^2)
n = nrow(t_s)
test = sample(1:n, n/2)
mean(((co2_emission-predict(model_validation,t_s))[-test])^2)
mean(((co2_emission-predict(y_pred_validation))[-test])^2)
mean(((co2_emission-predict(model_validation,t_s))[-test])^2)
library(ISLR)
cv.error.10 = rep(0,10)
set.seed(17)
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(co2_emission~year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data=eliminated)
cv.error.10[i]=cv.glm(eliminated,glm.fit,K=10)$delta[1]
}
library(boot)
set.seed(17)
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(co2_emission~year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data=eliminated)
cv.error.10[i]=cv.glm(eliminated,glm.fit,K=10)$delta[1]
}
cv.error.10
summary(model)
predictions <- model_validation %>% predict(model_validation, newdata = t_s, interval = 'confidence')
data.frame(
R2 = R2(predictions, swiss$Fertility),
RMSE = RMSE(predictions, swiss$Fertility),
MAE = MAE(predictions, swiss$Fertility)
)
predictions <- model_validation %>% predict(model_validation, newdata = t_s, interval = 'confidence')
library(dplyr)
predictions <- model_validation %>% predict(model_validation, newdata = t_s, interval = 'confidence')
data.frame(
R2 = R2(predictions, swiss$Fertility),
RMSE = RMSE(predictions, swiss$Fertility),
MAE = MAE(predictions, swiss$Fertility)
)
predictions <- model_validation %>% predict(model_validation, newdata = t_s, interval = 'confidence')
data.frame(
R2 = R2(predictions, t_s$co2_emission),
RMSE = RMSE(predictions, t_s$co2_emission),
MAE = MAE(predictions, t_s$co2_emission)
)
predictions <- model_validation %>% predict(model_validation, newdata = t_s, interval = 'confidence')
data.frame(
R2 = R2(predictions, t_s$co2_emission),
RMSE = RMSE(predictions, t_s$co2_emission),
MAE = MAE(predictions, t_s$co2_emission)
)
predictions
predictions
1:max(x)
1:max(tr_s)
car::vif(combined_model_1)
car::vif(combined_model_2)
car::vif(combined_model_3)
combined_model_1 <- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + urban_metric*fuel_cost_6000_miles*extra_urban_metric*combined_metric + noise_level, data = tr_s)
combined_model_2<- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles*combined_metric + noise_level, data = tr_s)
combined_model_3<- lm(co2_emission ~ year + transmission_type +
fuel_type + fuel_cost_6000_miles*combined_metric + noise_level, data = tr_s)
car::vif(combined_model_1)
car::vif(combined_model_2)
car::vif(combined_model_3)
car::vif(combined_model_1)
car::vif(combined_model_2)
car::vif(combined_model_3)
