summary(step.model)
step.model$anova
set.seed(1)
model <- lm(co2_emission ~ . -engine_capacity -fuel_cost_6000_miles, data = tr_s)
summary(model)
confint(model, level=.95)
set.seed(5)
step.model <- stepAIC(model, direction = "both", scope = formula(model), trace = FALSE)
step.model$anova
confint(step.model, level=.95)
summary(step.model)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
+ engine_capacity + fuel_cost_6000_miles + log (fuel_cost_6000_miles) + fuel_type + combined_metric  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
plot(model_not_linear)
plot(model_not_linear_log)
set.seed(5)
step.model_not_linear_log <- stepAIC(model_not_linear_log, direction = "both", scope = formula(model_not_linear_log), trace = FALSE)
confint(step.model, level=.95)
summary(step.model_not_linear_log)
anova(model_not_linear, step.model_not_linear)
# ==============================================================
# STEP-WISE SELECTION
# ==============================================================
set.seed(5)
step.model_not_linear_log <- stepAIC(model_not_linear_log, direction = "both", scope = formula(model_not_linear_log), trace = FALSE)
confint(step.model, level=.95)
summary(step.model_not_linear_log)
anova(model_not_linear_log, step.model_not_linear_log)
car::vif(model_not_linear_log)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity)
+ engine_capacity + fuel_cost_6000_miles + log(fuel_cost_6000_miles) + fuel_type +
combined_metric + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity)
+ engine_capacity + fuel_cost_6000_miles + I(fuel_cost_6000_miles^2) + fuel_type +
combined_metric + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity)
+ fuel_cost_6000_miles + I(fuel_cost_6000_miles^2) + fuel_type +
combined_metric + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + combined_metric  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear)
plot(model_not_linear_log)
car::vif(model_not_linear_log)
plot(model_not_linear_log)
car::vif(model_not_linear_log)
plot(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
engine_capacity + fuel_type + combined_metric  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + combined_metric  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
plot(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + log(fuel_cost_6000_miles)  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + I(fuel_cost_6000_miles^2)  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
plot(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + combined_metric  + noise_level, data = tr_s)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + I(fuel_cost_6000_miles^2)  + noise_level, data = tr_s_1)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + I(fuel_cost_6000_miles^2)  + noise_level, data = tr_s_1)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + I(fuel_cost_6000_miles^2)  + noise_level, data = tr_s_1)
summary(model_not_linear_log)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + I(fuel_cost_6000_miles^2)  + noise_level, data = tr_s_1)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + I(fuel_cost_6000_miles^2)  + noise_level, data = tr_s)
summary(model_not_linear_log)
View(t_s)
plot(co2_emission, fuel_cost_6000_miles)
abline(lm(co2_emission~fuel_cost_6000_miles), col="red")
lines(lowess(co2_emission,fuel_cost_6000_miles), col="blue")
m <- lm(co2_emission ~ fuel_cost_6000_miles + I(fuel_cost_6000_miles^2), data = my_data)
summary(m)
m_1 <- lm(co2_emission ~ fuel_cost_6000_miles, data = my_data)
summary(m)
anova(m_1, m)
m <- log(co2_emission ~ poly(fuel_cost_6000_miles, 3), data = my_data)
m <- lm(co2_emission ~ poly(fuel_cost_6000_miles, 3), data = my_data)
anova(m_1, m)
model_not_linear_log <- lm(co2_emission ~ euro_standard + transmission_type + log(engine_capacity) +
fuel_type + poly(fuel_cost_6000_miles, 3)  + noise_level, data = tr_s)
summary(model_not_linear_log)
confint(model_not_linear_log, level=.95)
car::vif(model_not_linear_log)
plot(model_not_linear_log)
plot(model_not_linear_log)
car::vif(model_not_linear_log)
View(tr_s)
car::vif(model)
set.seed(1)
model <- lm(co2_emission ~ . -engine_capacity, data = tr_s)
summary(model)
confint(model, level=.95)
car::vif(model)
set.seed(5)
step.model <- stepAIC(model, direction = "both", scope = formula(model), trace = FALSE)
step.model$anova
confint(step.model, level=.95)
summary(step.model)
step.model$anova
step.model$anova$Step
car::vif(model_outliers)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
boxplot(tr_s_outliers)$co2_emission
car::vif(model_outliers)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, method ="number")
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, method ="number")
model_reduced_collinearity_CM <- lm(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric + noise_level, data = tr_s_outliers)
summary(model_reduced_collinearity_CM)
confint(model_reduced_collinearity_CM, level=.95)
car::vif(model_reduced_collinearity_CM)
model_reduced_collinearity_FC6000 <- lm(co2_emission ~ euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles  + noise_level + extra_urban_metric, data = tr_s_outliers)
summary(model_reduced_collinearity_FC6000 )
confint(model_reduced_collinearity_FC6000 , level=.95)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, method ="number")
car::vif(model_reduced_collinearity_FC6000 )
model_reduced_collinearity_FC6000 <- lm(co2_emission ~ euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles  + noise_level + extra_urban_metric, data = tr_s_outliers)
summary(model_reduced_collinearity_FC6000 )
confint(model_reduced_collinearity_FC6000 , level=.95)
car::vif(model_reduced_collinearity_FC6000 )
model_reduced_collinearity_FC6000 <- lm(co2_emission ~ euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles  + noise_level, data = tr_s_outliers)
summary(model_reduced_collinearity_FC6000 )
confint(model_reduced_collinearity_FC6000 , level=.95)
car::vif(model_reduced_collinearity_FC6000 )
mean((model_reduced_collinearity_CM$residuals)^2)
3.45*3.45
mean((model_reduced_collinearity_FC6000$residuals)^2)
6.48*6.48
model_reduced_collinearity_FC6000 <- lm(co2_emission ~ euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles  + noise_level, data = tr_s_outliers)
mean((model_reduced_collinearity_FC6000$residuals)^2)
summary(model_reduced_collinearity_FC6000)
anova(model_reduced_collinearity_CM, model_reduced_collinearity_FC6000)
set.seed(5)
step.model_CM <- stepAIC(model_reduced_collinearity_CM, direction = "both", scope = formula(model_reduced_collinearity_CM), trace = FALSE)
step.model_CM$anova
confint(step.model, level=.95)
summary(step.model_CM)
x <-regsubsets(co2_emission~euro_standard + transmission_type +
fuel_type + combined_metric  + noise_level, data=tr_s_outliers, nvmax = 6, method = "seqrep")
summary(x)
regfit.full=regsubsets(model_reduced_collinearity_CM,merComplete)
reg.summary=summary(regfit.full)
library(leaps)
regfit.full=regsubsets(model_reduced_collinearity_CM, tr_s_outliers)
regfit.full=regsubsets(model_reduced_collinearity_CM, tr_s_outliers, nvmax = 5
regfit.full=regsubsets(model_reduced_collinearity_CM, tr_s_outliers, nvmax = 5)
regfit.full=regsubsets(model_reduced_collinearity_CM, tr_s_outliers, nvmax = 5)
regfit.full=regsubsets(model_reduced_collinearity_CM, tr_s_outliers, nvmax = 5)
regfit.full <-regsubsets(co2_emission~euro_standard + transmission_type +
fuel_type + combined_metric  + noise_level, data=tr_s_outliers, nvmax = 6, method = "seqrep")
reg.summary=summary(regfit.full)
reg.summary$rsq # R2 statistic increases monotonically as more variables are included.
which.min(reg.summary$rss) # identify the location of the minimum in the model with 8 predictors.
which.max(reg.summary$adjr2) # infact Adjusted R2 statistic is max in the model with 8 predictors.
reg.summary$rsq # R2 statistic increases monotonically as more variables are included.
which.min(reg.summary$rss) # identify the location of the minimum in the model with 8 predictors.
which.max(reg.summary$adjr2) # infact Adjusted R2 statistic is max in the model with 8 predictors.
which.max(reg.summary$adjr2) # infact Adjusted R2 statistic is max in the model with 8 predictors.
library(leaps)
# The regsubsets() function (part of the leaps library) performs best subset selection
# by identifying the best model that contains a given number of predictors,
regfit.full <-regsubsets(co2_emission~euro_standard + transmission_type +
fuel_type + combined_metric  + noise_level, data=tr_s_outliers, nvmax = 6, method = "seqrep")
reg.summary=summary(regfit.full)
reg.summary$rsq # R2 statistic increases monotonically as more variables are included.
which.min(reg.summary$rss) # identify the location of the minimum in the model with 8 predictors.
which.max(reg.summary$adjr2) # infact Adjusted R2 statistic is max in the model with 8 predictors.
reg.summary$adjr2
reg.summary$rss
# The best results is the model with 8 predictors
cat("\nLocation of RSS min:",which.min(reg.summary$rss),"\n")
cat("Location of adj-RSq max:",which.max(reg.summary$adjr2),"\n ")
cat("Location of Cp min:",which.min(reg.summary$cp),"\n ")
cat("Location of BIC min:",which.min(reg.summary$bic),"\n ")
# Plot RSS, adjusted R2, Cp, and BIC for all of the models at once
# As we seen in the plot, the best results is the model with 8 predictors
dev.new()
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",
type="l")
points(which.min(reg.summary$rss),min(reg.summary$rss), col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(reg.summary$adjr2),max(reg.summary$adjr2), col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(reg.summary$cp ),min(reg.summary$cp),col="red",cex=2,pch=20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(reg.summary$bic),min(reg.summary$bic),col="red",cex=2,pch=20)
# Plot RSS, adjusted R2, Cp, and BIC for all of the models at once
# As we seen in the plot, the best results is the model with 8 predictors
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",
type="l")
points(which.min(reg.summary$rss),min(reg.summary$rss), col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(reg.summary$adjr2),max(reg.summary$adjr2), col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(reg.summary$cp ),min(reg.summary$cp),col="red",cex=2,pch=20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(reg.summary$bic),min(reg.summary$bic),col="red",cex=2,pch=20)
x <-regsubsets(co2_emission~euro_standard + transmission_type +
fuel_type + combined_metric  + noise_level, data=tr_s_outliers, nvmax = 6, method = "forward")
summary(x)
set.seed(100)
model_reduced_collinearity_CM <- lm(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric + noise_level, data = tr_s_outliers)
summary(model_reduced_collinearity_CM)
confint(model_reduced_collinearity_CM, level=.95)
car::vif(model_reduced_collinearity_CM)
set.seed(5)
step.model_CM <- stepAIC(model_reduced_collinearity_CM, direction = "both", scope = formula(model_reduced_collinearity_CM), trace = FALSE)
step.model_CM$anova
confint(step.model, level=.95)
summary(step.model_CM)
step.model_CM$rsq
step.model_CM$rss
x <-regsubsets(co2_emission~euro_standard + transmission_type +
fuel_type + combined_metric  + noise_level, data=tr_s_outliers, nvmax = 6, method = "forward")
regfit.full <-regsubsets(co2_emission~euro_standard + transmission_type +
fuel_type + combined_metric  + noise_level, data=tr_s_outliers, nvmax = 6, method = "forward")
reg.summary=summary(regfit.full)
reg.summary$rsq # R2 statistic increases monotonically as more variables are included.
reg.summary$adjr2
reg.summary$rss
which.min(reg.summary$rss) # identify the location of the minimum in the model with 8 predictors.
which.max(reg.summary$adjr2) # infact Adjusted R2 statistic is max in the model with 8 predictors.
# The best results is the model with 8 predictors
cat("\nLocation of RSS min:",which.min(reg.summary$rss),"\n")
cat("Location of adj-RSq max:",which.max(reg.summary$adjr2),"\n ")
cat("Location of Cp min:",which.min(reg.summary$cp),"\n ")
cat("Location of BIC min:",which.min(reg.summary$bic),"\n ")
# Plot RSS, adjusted R2, Cp, and BIC for all of the models at once
# As we seen in the plot, the best results is the model with 8 predictors
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",
type="l")
points(which.min(reg.summary$rss),min(reg.summary$rss), col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(reg.summary$adjr2),max(reg.summary$adjr2), col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(reg.summary$cp ),min(reg.summary$cp),col="red",cex=2,pch=20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(reg.summary$bic),min(reg.summary$bic),col="red",cex=2,pch=20)
# Another way to see the best model according the graphs
dev.new()
plot(regfit.full,scale="r2")
dev.new()
plot(regfit.full,scale="adjr2")
dev.new()
plot(regfit.full,scale="Cp") # best model with "Cp" min
dev.new()
plot(regfit.full,scale="bic") # best model with smaller "bic"
# The BIC is a variant of the ACI with higher penalty terms. (It is closely related to the ACI)
reg.summary=summary(regfit.full)
summary(regfit.full)
model_reduced_collinearity_FC6000 <- lm(co2_emission ~  fuel_type + combined_metric, data = tr_s_outliers)
summary(model_reduced_collinearity_FC6000 )
confint(model_reduced_collinearity_FC6000 , level=.95)
car::vif(model_reduced_collinearity_FC6000 )
set.seed(5)
step.model_CM <- stepAIC(model_reduced_collinearity_CM, direction = "both", scope = formula(model_reduced_collinearity_CM), trace = FALSE)
step.model_CM$anova
confint(step.model, level=.95)
summary(step.model_CM)
set.seed(5)
step.model_CM <- stepAIC(model_reduced_collinearity_CM, direction = "both", scope = formula(model_reduced_collinearity_CM), trace = FALSE)
step.model_CM$anova
confint(step.model_CM, level=.95)
summary(step.model_CM)
reg.summary$rsq # R2 statistic increases monotonically as more variables are included.
set.seed(8)
y_pred_validation = predict(model_reduced_collinearity_CM, newdata = t_s, interval = 'confidence')
plot(y_pred_validation)
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'confidence')
plot(y_pred_step_model)
set.seed(8)
y_pred = predict(model_reduced_collinearity_CM, newdata = t_s, interval = 'confidence')
y_pred
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'confidence')
y_pred
View(t_s)
# ==============================================================
# TEST PREDICTION
# ==============================================================
set.seed(8)
y_pred = predict(model_reduced_collinearity_CM, newdata = t_s, interval = 'predict')
y_pred
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'predict')
y_pred
set.seed(8)
y_pred = predict(model_reduced_collinearity_CM, newdata = t_s, interval = 'predict')
y_pred
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'predict')
y_pred
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'predict')
y_pred
View(model_outliers)
View(tr_s_outliers)
View(tr_s_1)
# ==============================================================
# TEST PREDICTION
# ==============================================================
set.seed(8)
y_pred = predict(model_reduced_collinearity_CM, newdata = t_s_1, interval = 'predict')
y_pred
y_pred = predict(model_reduced_collinearity_CM, newdata = t_s, interval = 'predict')
y_pred
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'predict')
y_pred
model_validation <- train(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
mean((model_reduced_collinearity_CM$residuals)^2)
train.control <- trainControl(method = "cv", number = 10)
set.seed(6)
model_validation <- train(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
mean((model_validation$residuals)^2)
train.control <- trainControl(method = "cv", number = 10)
set.seed(6)
model_validation <- train(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
mean((model_reduced_collinearity_CM$residuals)^2)
m <- train(co2_emission ~ fuel_type + combined_metric, data= tr_s_outliers, method = "lm", trControl = train.control )
summary(m)
summary(model_reduced_collinearity_CM_min)
m$pred
train.control <- trainControl(method = "cv", number = 10)
set.seed(6)
model_validation <- train(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric + noise_level, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
mean((model_validation$residuals)^2)
model_validation$pred
model_validation$bestTune
model_validation$modelType
model_validation$finalModel$residuals
mean((model_validation$finalModel$residuals)^2)
train.control <- trainControl(method = "cv", number = 10)
set.seed(6)
model_validation <- train(co2_emission ~ euro_standard + transmission_type +
fuel_type + combined_metric + noise_level, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
mean((model_validation$finalModel$residuals)^2)
mean((model_reduced_collinearity_CM_min$residuals)^2)
set.seed(7)
model_reduced_collinearity_CM_min <- lm(co2_emission ~ fuel_type + combined_metric, data = tr_s_outliers)
y_pred_step_model = predict(model_reduced_collinearity_CM_min, newdata = t_s, interval = 'predict')
y_pred
mean((model_reduced_collinearity_CM_min$residuals)^2)
plot.new()
boxplot(tr_s_1)$co2_emission
set.seed(2)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
boxplot(tr_s_outliers)$co2_emission
plot.new()
boxplot(tr_s_1)$co2_emission
set.seed(2)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
boxplot(tr_s_outliers)$co2_emission
plot.new()
boxplot(tr_s_1)$co2_emission
set.seed(2)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
boxplot(tr_s_outliers)$co2_emission
plot.new()
boxplot(tr_s_1)$co2_emission
#set.seed(2)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
plot.new()
boxplot(tr_s_1)$co2_emission
#set.seed(2)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
plot.new()
boxplot(tr_s_1)$co2_emission
#set.seed(2)
LargeResiduals <- abs(rstudent(model)) > 3
tr_s_outliers <- tr_s_1[!LargeResiduals,]
set.seed(4)
model_outliers<-lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_outliers)
# ==============================================================
library(corrplot)
library(caTools)
library(tidyverse)
library(caret)
library(ISLR)
library(MASS)
library(boot)
library(stringr)
library(car)
library(leaps)
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
# PREPREOCCESSING FOR ENCODING CATEGORICAL DATA
# data_complete$Colonna = factor(data_complete$Colonna, levels = c('', '', ''),
#                               labels = c(1,2,3))
# library(MASS)
# step.model <- stepAIC(model, direction = "both", trace = FALSE)
# summary(step.model)
# y_pred = predict(model, newdata = t_s)
attach(data_complete)
data_complete <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
View(data_complete)
View(data_complete)
View(data_complete)
View(data_complete)
