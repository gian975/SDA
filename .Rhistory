split = sample.split(data_complete$co2_emission, SplitRatio = 0.8)
tr_s = subset(data_complete, split == TRUE)
t_s = subset(data_complete, split == FALSE)
install.packages('caTools')
library(caTools)
split = sample.split(data_complete$co2_emission, SplitRatio = 0.8)
tr_s = subset(data_complete, split == TRUE)
t_s = subset(data_complete, split == FALSE)
model <- lm(co2_emission ~ ., data = data_complete)
summary(model)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
View(data_complete)
View(data_complete)
View(data_complete)
View(data_complete)
View(data_complete)
model <- lm(co2_emission ~ ., data = tr_s)
res <- cor(tr_s)
res <- cor([tr_s$transmission_type, tr_s$engine_capacity])
res <- cor(tr_s$transmission_type, tr_s$engine_capacity)
round(res,2)
install.packages("corrplot")
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(tr_s)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data_complete)
data_complete.cor = cor(data_complete)
data_complete.cor = cor(data_complete, use="pairwise.complete.obs")
my_data = data_complete[, c = (1,2,3,6,7,8,9,10,11)]
my_data <- data_complete[, c = (1,2,3,6,7,8,9,10,11)]
my_data <- data_complete[c = (1,2,3,6,7,8,9,10,11)]
my_data <- data_complete[,c(1,2,3,6,7,8,9,10,11)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
my_data <- data_complete[,c(1,2,3,7,8,9,10,11)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level + combined_metric + extra_urban_metric, data = dataComplete)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level + combined_metric + extra_urban_metric, data = data_complete)
summary(fit1)
my_data <- data_complete[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level, data = data_complete)
summary(fit1)
my_data <- data_complete[,c(7,16,10,9,8,14)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level, data = tr_s)
summary(fit1)
y_pred = predict(fit1, newdata = t_s)
y_pred
View(t_s)
View(t_s)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt", header=FALSE)
View(datatraining)
write.csv(datatraining, "dataset.csv")
my_data <- data_complete[,c(2,3,4,5,6,7,8)]
my_data <- datatraining[,c(2,3,4,5,6,7,8)]
head(my_data)
colnames(my_data)
datatraining <- ChickWeight[-c(1),]
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt", row.names=1)
View(datatraining)
write.csv(datatraining, "dataset.csv")
datatest <- read.csv("C:/Users/Utente/Desktop/datatest.txt")
View(datatest)
View(Advertising_FP)
View(Advertising_FP)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt")
View(datatraining)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt")
View(datatraining)
dataset <- datatraining[datatraining$Occupancy == "1", ]
View(dataset)
dataset_2 <- datatraining[datatraining$Occupancy == "0", 1729]
View(dataset_2)
dataset_2 <- datatraining[datatraining$Occupancy == "0",]
View(dataset_2)
datatest2 <- read.csv("C:/Users/Utente/Desktop/datatest2.txt")
View(datatest2)
data_datatest2 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2 <- datatest2[datatraining$Occupancy == "1", ]
dataset_2 <- subset(datatraining, datatraining$Occupancy == "0")
View(dataset_2)
datatest <- read.csv("C:/Users/Utente/Desktop/datatest.txt")
View(datatest)
datatest2 <- read.csv("C:/Users/Utente/Desktop/datatest2.txt")
View(datatest2)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt")
View(datatraining)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatraining$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
View(data_datatest2_1)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
dataset_2 <- subset(datatraining[, 3778], datatraining$Occupancy == "0")
View(dataset_2)
dataset_2 <- (datatraining[sample(1:nrow(datatraining)), 3778, replace = FALSE, ]
View(dataset_2)
dataset_2 <- datatraining[sample(1:nrow(datatraining), 3778, replace = FALSE), ]
View(dataset_2)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
data_datatraining_0 <- datatraining[sample(1:nrow(datatraining), 3778, replace = FALSE), ]
View(dataset_2)
total <- rbind(total, data_datatraining_0)
View(total)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
data_datatraining_0 <- datatraining[sample(1:nrow(datatraining), 3778, replace = FALSE), ]
View(dataset_2)
data_datatraining_0 <- datatraining[sample(1:nrow(datatraining$Occupancy == "0"), 3778, replace = FALSE), ]
View(dataset_2)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
test = datatraining[datatraining$Occupancy == "0", ]
data_datatraining_0 <- datatraining[sample(1:nrow(test), 3778, replace = FALSE), ]
View(data_datatraining_0)
total <- rbind(total, data_datatraining_0)
View(total)
View(test)
View(data_datatraining_0)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
test = datatraining[datatraining$Occupancy == "0", ]
data_datatraining_0 <- test[sample(1:nrow(test), 3778, replace = FALSE), ]
View(data_datatraining_0)
total <- rbind(total, data_datatraining_0)
View(total)
write.csv(total, "dataset_balanced.csv")
datatest <- read.csv("C:/Users/Utente/Desktop/datatest.txt")
View(datatest)
write.csv(datatest, "datatest.csv")
View(datatest)
data_complete <- read.csv("data_complete.csv", header=TRUE)
data_complete <- read.csv("data_complete.csv", header=TRUE)
data_complete <- read.csv("../data_complete.csv", header=TRUE)
data_complete <- read.csv("/data_complete.csv", header=TRUE)
data_complete <- read.csv("/dataset/data_complete.csv", header=TRUE)
data_complete <- read.csv("~/GitHub/SDA/dataset/data_complete.csv")
View(data_complete)
data_complete <- read.csv("/dataset/data_complete.csv", header=TRUE)
load("~/GitHub/SDA/Prova_SDA.R")
View(data_complete)
head(data_complete)
names(data_complete)
View(data_complete)
setwd("~/GitHub/SDA")
data_complete <- read.csv("/dataset/data_complete.csv", header=TRUE)
setwd("~/GitHub/SDA")
data_complete <- read.csv("/dataset/data_complete.csv", header=TRUE)
data_complete <- read.csv("~/GitHub/SDA/dataset/data_complete.csv")
View(data_complete)
setwd("~/GitHub/SDA")
setwd("~/GitHub/SDA")
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
model <- lm(co2_emission ~ ., data = tr_s)
install.packages('caTools')
library(caTools)
split = sample.split(data_complete$co2_emission, SplitRatio = 0.8)
tr_s = subset(data_complete, split == TRUE)
t_s = subset(data_complete, split == FALSE)
attach(data_complete)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
summary(model)
step.model <- stepAIC(model, direction = "both",
trace = FALSE)
step.model <- stepAIC(model, direction = "both",
trace = FALSE)
library(MASS)
step.model <- stepAIC(model, direction = "both",
trace = FALSE)
model <- lm(co2_emission ~ ., data = data_complete)
summary(model)
my_data <- data_complete[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)]
model <- lm(co2_emission ~ ., data = my_data)
summary(model)
View(my_data)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
model <- lm(co2_emission ~ ., data = my_data)
summary(model)
library(MASS)
step.model <- stepAIC(model, direction = "both",
trace = FALSE)
summary(step.model)
library(caTools)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
library(MASS)
step.model <- stepAIC(model, direction = "both",
trace = FALSE)
summary(step.model)
y_pred = predict(model, newdata = t_s)
y_pred
View(my_data)
View(t_s)
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
library(tidyverse)
library(caret)
data_complete.frame(
RMSE = RMSE(y_pred, t_s$co2_emission),
R2 = R2(y_pred, t_s$co2_emission)
)
library(tidyverse)
library(caret)
RMSE = RMSE(y_pred, t_s$co2_emission),
R2 = R2(y_pred, t_s$co2_emission)
car::vif(model)
my_data <- my_data[,c(1,2,3,4,5,7,9)]
fit1 <- lm(co2_emission ~ year + euro_standard + trasmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = my_data)
my_data <- my_data[,c(1,2,3,4,5,7,9)]
fit1 <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = my_data)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
my_data_reduced <- my_data[,c(1,2,3,4,5,7,9)]
fit1 <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = my_data_reduced)
summary(fit1)
t_s_reduced <- t_s[,c(1,2,3,4,5,7,9)]
y_pred = predict(model, newdata = t_s_reduced)
t_s_reduced <- t_s[,c(1,2,3,4,5,7,9)]
y_pred = predict(fit1, newdata = t_s_reduced)
y_pred
View(t_s_reduced)
tr_s_reduced <- tr_s[,c(1,2,3,4,5,7,9,10)]
fit1 <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s_reduced)
summary(fit1)
t_s_reduced <- t_s[,c(1,2,3,4,5,7,9,10)]
y_pred = predict(fit1, newdata = t_s_reduced)
y_pred
tr_s_reduced.cor = cor(tr_s_reduced, use="pairwise.complete.obs")
round(tr_s_reduced, 2)
tr_s_reduced.cor = cor(tr_s_reduced, use="pairwise.complete.obs")
round(tr_s_reduced.cor, 2)
tr_s_reduced <- tr_s[,c(1,2,3,4,5,7,9,10, 11)]
fit1 <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level + fuel_cost_6000_miles, data = tr_s_reduced)
summary(fit1)
tr_s_reduced <- tr_s[,c(1,2,3,4,5,7,9,10, 11)]
fit1 <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level + fuel_cost_6000_miles, data = tr_s_reduced)
summary(fit1)
t_s_reduced <- t_s[,c(1,2,3,4,5,7,9,10, 11)]
y_pred = predict(fit1, newdata = t_s_reduced)
y_pred
tr_s_reduced.cor = cor(tr_s_reduced, use="pairwise.complete.obs")
round(tr_s_reduced.cor, 2)
setwd("~/GitHub/SDA")
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
install.packages('caTools')
library(caTools)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
install.packages("caTools")
model <- lm(co2_emission ~ ., data = tr_s)
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
y_pred = predict(model, newdata = t_s)
tr_s_reduced_collinearity <- tr_s[,c(1,2,3,4,5,7,9,10, 11)]
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level + fuel_cost_6000_miles, data = tr_s_reduced)
summary(model_reduced_collinearity)
tr_s_reduced_collinearity <- tr_s[,c(1,2,3,4,5,7,9,10, 11)]
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level + fuel_cost_6000_miles, data = tr_s_reduced_collinearity)
summary(model_reduced_collinearity)
tr_s_reduced_collinearity.cor = cor(tr_s_reduced_collinearity, use="pairwise.complete.obs")
round(tr_s_reduced_collinearity.cor, 2)
tr_s_reduced_collinearity <- tr_s[,c(1,2,3,4,5,7,9,10, 11)]
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level + fuel_cost_6000_miles, data = tr_s_reduced_collinearity)
summary(model_reduced_collinearity)
t_s_reduced_collinearity <- t_s[,c(1,2,3,4,5,7,9,10, 11)]
y_pred = predict(model_reduced_collinearity, newdata = t_s_reduced_collinearity)
tr_s_reduced_collinearity.cor = cor(tr_s_reduced_collinearity, use="pairwise.complete.obs")
round(tr_s_reduced_collinearity.cor, 2)
car::vif(model)
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
tr_s_reduced_collinearity <- tr_s[,c(1,2,3,4,5,7,9,10)]
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s_reduced_collinearity)
summary(model_reduced_collinearity)
t_s_reduced_collinearity <- t_s[,c(1,2,3,4,5,7,9,10)]
y_pred = predict(model_reduced_collinearity, newdata = t_s_reduced_collinearity)
tr_s_reduced_collinearity.cor = cor(tr_s_reduced_collinearity, use="pairwise.complete.obs")
round(tr_s_reduced_collinearity.cor, 2)
summary(model_reduced_collinearity)
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
car::vif(model)
# DOPO LE RIFLESSIONI:
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s)
summary(model_reduced_collinearity)
y_pred = predict(model_reduced_collinearity, newdata = t_s)
tr_s_reduced_collinearity.cor = cor(tr_s_reduced_collinearity, use="pairwise.complete.obs")
round(tr_s_reduced_collinearity.cor, 2)
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2);
library(corrplot)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
car::vif(model)
# DOPO LE RIFLESSIONI:
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s)
summary(model_reduced_collinearity)
y_pred = predict(model_reduced_collinearity, newdata = t_s)
tr_s_reduced_collinearity.cor = cor(tr_s_reduced_collinearity, use="pairwise.complete.obs")
round(tr_s_reduced_collinearity.cor, 2);
library(corrplot)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
plot(model_reduced_collinearity)
setwd("~/GitHub/SDA")
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
install.packages('caTools')
library(caTools)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
library(corrplot)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s)
summary(model_reduced_collinearity)
tr_s.cor = cor(tr_s, use="pairwise.complete.obs")
round(tr_s.cor, 2);
confint(model_reduced_collinearity, level=.95)
resid <- model_reduced_collinearity$residuals
hist(resid)
plot(model_reduced_collinearity$residuals ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level)
abline(0,0)
plot(model_reduced_collinearity$residuals ~ disp)
abline(0,0)
plot(model_reduced_collinearity$residuals ~ CO2)
abline(0,0)
plot(model_reduced_collinearity$residuals ~ fuel_type)
abline(0,0)
plot(model_reduced_collinearity$residuals~fuel_type)
abline(0,0)
plot(model_reduced_collinearity$residuals)
abline(0,0)
plot(model_reduced_collinearity$residuals~euro_standard)
plot(resid~euro_standard)
abline(0,0)
plot(model_reduced_collinearity$residuals~.)
abline(0,0)
plot(model_reduced_collinearity$residuals~year)
abline(0,0)
plot(model_reduced_collinearity$residuals~tr_s)
abline(0,0)
plot(model_reduced_collinearity)
plot(model_reduced_collinearity)
plot(model_reduced_collinearity)
plot(yfit, abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
residui<-model_reduced_collinearity$residuals
yfit<-fitted(model_reduced_collinearity)
plot(yfit, abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot(y_fit, abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")plot(sqrt(yfit), abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot(sqrt(yfit), abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot(sqrt(yfit), abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot(log(yfit), abs(residui), ylab="Residui", xlab="Fitted", main="Residui in valore assoluto vs fitted")
plot(model_reduced_collinearity)
View(data_complete)
View(data_complete)
View(tr_s)
View(tr_s)
setwd("~/GitHub/SDA")
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
install.packages('caTools')
library(caTools)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric + extra_urban_metric + combined_metric + noise_level + fuel_cost_6000_miles, data = tr_s, data = tr_s)
install.packages("caTools")
model <- lm(co2_emission ~ co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric + extra_urban_metric + combined_metric + noise_level + fuel_cost_6000_miles, data = tr_s, data = tr_s)
model <- lm(co2_emission ~ co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric + extra_urban_metric + combined_metric + noise_level + fuel_cost_6000_miles, data = tr_s)
model <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric + extra_urban_metric + combined_metric + noise_level + fuel_cost_6000_miles, data = tr_s)
summary(model)
model <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + urban_metric + extra_urban_metric + combined_metric + noise_level + fuel_cost_6000_miles, data = tr_s)
summary(model)
model <- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + urban_metric + extra_urban_metric + combined_metric + noise_level + fuel_cost_6000_miles, data = tr_s)
summary(model)
library(corrplot)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
combined_model <- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + urban_metric*fuel_cost_6000_miles*extra_urban_metric*combined_metric + noise_level, data = tr_s)
summary(combined_model)
combined_model_2<- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles*combined_metric + noise_level, data = tr_s)
summary(combined_model_2)
combined_model_3<- lm(co2_emission ~ year + transmission_type +
fuel_type + fuel_cost_6000_miles*combined_metric + noise_level, data = tr_s)
summary(combined_model_3)
View(combined_model)
View(combined_model)
combined_model_1 <- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + urban_metric*fuel_cost_6000_miles*extra_urban_metric*combined_metric + noise_level, data = tr_s)
plot(combined_model_1)
plot(combined_model_2)
plot(combined_model_3)
plot(model)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
setwd("~/GitHub/SDA")
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
# PREPREOCCESSING FOR ENCODING CATEGORICAL DATA
# data_complete$Colonna = factor(data_complete$Colonna, levels = c('', '', ''),
#                               labels = c(1,2,3))
install.packages('caTools')
library(caTools)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
MSE <- sqrt(sum((model$residuals)^2)/21)
MSE
MSE <- sqrt(sum((model$residuals)^2)/45440)
MSE
MSE <- sqrt(sum((model$residuals)^2)/36350)
MSE
confint(model, level=.95)
carr::vif(model)
library(corrplot)
car::vif(model)
plot(model)
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + extra_urban_metric + noise_level, data = tr_s, method = "lm",
trControl = train.control)
library(tidyverse)
library(caret)
installed.packages(caret)
install.packages(caret)
install.packages(caret)
View(data_complete)
View(data_complete)
View(data_complete)
install.packages(c("caret", "tidyverse"))
