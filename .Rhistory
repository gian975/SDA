install.packages(car)
install.packages("car")
library(car)
vif(fit)
corBo <- round(cor(Boston), digits = 2)
fit1 = lm(medv~.-rad, data = Boston)
summary(fit1)
fit = lm(medv~lstat*age, data=Bonston); summary(fit)
fit = lm(medv~lstat+age+lstat:age, data=Boston); summary(fit)
fit1 = lm(medv~lstat, data = Boston); summary(fit1)
fit2 = lm(medv~lstat+I(lstat^2), data = Boston); summary(fit2)
anova(fit1,fit2)
par(mfrow = c(2,2))
plot(fit2)
fit3 = lm(medv~poly(lstat,5), data = Boston); summary(fit3)
dev.new()
par(mfrow = c(2,2))
anova(fit1,fit2)
anova(fit1, fit2)
library(readxl)
Advertising_FP <- read_excel("C:/Users/Utente/Downloads/Advertising_FP.csv")
View(Advertising_FP)
View(corBo)
library(readr)
Advertising_FP <- read_csv("C:/Users/Utente/Downloads/Advertising_FP.csv")
View(Advertising_FP)
############### Advertising Data ##################
ad = read.csv("Advertising_FP.csv")
attach(ad)
View(Advertising_FP)
library(readr)
Advertising_FP <- read_csv("C:/Users/Utente/Downloads/Advertising_FP.csv")
View(Advertising_FP)
############### Advertising Data ##################
ad = read.csv("Advertising_FP.csv")
############### Advertising Data ##################
ad = read.csv("C:\Users\Utente\Downloads\Advertising_FP.csv")
############### Advertising Data ##################
ad = read.csv(r"C:\Users\Utente\Downloads\Advertising_FP.csv")
install.packages("ISLR")
############### Advertising Data ##################
ad = read.csv("Advertising_FP.csv")
View(Advertising_FP)
View(Advertising_FP)
View(Advertising_FP)
############### Advertising Data ##################
ad = read.csv("Advertising_FP.csv")
source('C:/Users/Utente/Desktop/universitÃ /Statistical Data Analysis/Es_20Aprile.R')
data_complete <- read.csv("C:/Users/Utente/Desktop/data_complete.csv", header=FALSE)
View(data_complete)
data_complete <- read.csv("C:/Users/Utente/Desktop/data_complete.csv", header=TRUE)
view(data_complete)
d <- data_complete %>% select(X, X1, make)
d <- data_complete > select(X, X1, make)
View(data_complete)
attach(data_complete)
fit <- lm(co2_emission)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + year + transmission_type
+ noise_level + combined_metric + urban_metric + extra_urban_metric, data = data_complete)
summary(fit1)
plot(fit1)
fit2 <- lm(co2_emission ~ euro_standard)
summary(fit2)
plot(fit2)
resid(fit1)
head(ddata_complete)
names(data_complete)
head(data_complete)
names(data_complete)
plot(co2_emission, year)
plot(co2_emission, make)
plot(co2_emission, model)
plot(co2_emission, description)
plot(co2_emission, euro_standard)
plot(co2_emission, transmission_type)
plot(co2_emission, engine_capacity)
plot(co2_emission, fuel_type)
plot(co2_emission, urban_metric)
plot(co2_emission, extra_urban_metric)
plot(co2_emission, combined_metric)
plot(co2_emission, noise_level)
plot(co2_emission, fuel_cost_6000_miles)
model <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + year + transmission_type
+ noise_level + combined_metric + urban_metric + extra_urban_metric, data = data_complete)
summary(fit1)
sqrt(sum((model$residuals)^2)/45430)
confint(model, level=.95)
resid<- model$residuals
hist(resid)
qqnorm(resid)
qqline(resid)
plot(model)
plot(co2_emission, year)
plot(co2_emission, make)
plot(co2_emission, model)
plot(co2_emission, model)
plot(co2_emission, description)
plot(co2_emission, euro_standard)
plot(co2_emission, transmission_type)
plot(co2_emission, engine_capacity)
plot(co2_emission, fuel_type)
plot(co2_emission, urban_metric)
plot(co2_emission, noise_level)
split = sample.split(data_complete$co2_emission, SplitRatio = 0.8)
tr_s = subset(data_complete, split == TRUE)
t_s = subset(data_complete, split == FALSE)
install.packages('caTools')
library(caTools)
split = sample.split(data_complete$co2_emission, SplitRatio = 0.8)
tr_s = subset(data_complete, split == TRUE)
t_s = subset(data_complete, split == FALSE)
model <- lm(co2_emission ~ ., data = data_complete)
summary(model)
model <- lm(co2_emission ~ ., data = tr_s)
summary(model)
View(data_complete)
View(data_complete)
View(data_complete)
View(data_complete)
View(data_complete)
model <- lm(co2_emission ~ ., data = tr_s)
res <- cor(tr_s)
res <- cor([tr_s$transmission_type, tr_s$engine_capacity])
res <- cor(tr_s$transmission_type, tr_s$engine_capacity)
round(res,2)
install.packages("corrplot")
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(tr_s)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data_complete)
data_complete.cor = cor(data_complete)
data_complete.cor = cor(data_complete, use="pairwise.complete.obs")
my_data = data_complete[, c = (1,2,3,6,7,8,9,10,11)]
my_data <- data_complete[, c = (1,2,3,6,7,8,9,10,11)]
my_data <- data_complete[c = (1,2,3,6,7,8,9,10,11)]
my_data <- data_complete[,c(1,2,3,6,7,8,9,10,11)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
my_data <- data_complete[,c(1,2,3,7,8,9,10,11)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level + combined_metric + extra_urban_metric, data = dataComplete)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level + combined_metric + extra_urban_metric, data = data_complete)
summary(fit1)
my_data <- data_complete[,c(1,2,3,7,8,9,10,11,12,13,14,15,16)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level, data = data_complete)
summary(fit1)
my_data <- data_complete[,c(7,16,10,9,8,14)]
my_data.cor = cor(my_data, use="pairwise.complete.obs")
round(my_data.cor, 2)
fit1 <- lm(co2_emission ~ euro_standard + fuel_cost_6000_miles + fuel_type + engine_capacity + transmission_type
+ noise_level, data = tr_s)
summary(fit1)
y_pred = predict(fit1, newdata = t_s)
y_pred
View(t_s)
View(t_s)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt", header=FALSE)
View(datatraining)
write.csv(datatraining, "dataset.csv")
my_data <- data_complete[,c(2,3,4,5,6,7,8)]
my_data <- datatraining[,c(2,3,4,5,6,7,8)]
head(my_data)
colnames(my_data)
datatraining <- ChickWeight[-c(1),]
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt", row.names=1)
View(datatraining)
write.csv(datatraining, "dataset.csv")
datatest <- read.csv("C:/Users/Utente/Desktop/datatest.txt")
View(datatest)
View(Advertising_FP)
View(Advertising_FP)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt")
View(datatraining)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt")
View(datatraining)
dataset <- datatraining[datatraining$Occupancy == "1", ]
View(dataset)
dataset_2 <- datatraining[datatraining$Occupancy == "0", 1729]
View(dataset_2)
dataset_2 <- datatraining[datatraining$Occupancy == "0",]
View(dataset_2)
datatest2 <- read.csv("C:/Users/Utente/Desktop/datatest2.txt")
View(datatest2)
data_datatest2 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2 <- datatest2[datatraining$Occupancy == "1", ]
dataset_2 <- subset(datatraining, datatraining$Occupancy == "0")
View(dataset_2)
datatest <- read.csv("C:/Users/Utente/Desktop/datatest.txt")
View(datatest)
datatest2 <- read.csv("C:/Users/Utente/Desktop/datatest2.txt")
View(datatest2)
datatraining <- read.csv("C:/Users/Utente/Desktop/datatraining.txt")
View(datatraining)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatraining$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
View(data_datatest2_1)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
dataset_2 <- subset(datatraining[, 3778], datatraining$Occupancy == "0")
View(dataset_2)
dataset_2 <- (datatraining[sample(1:nrow(datatraining)), 3778, replace = FALSE, ]
View(dataset_2)
dataset_2 <- datatraining[sample(1:nrow(datatraining), 3778, replace = FALSE), ]
View(dataset_2)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
data_datatraining_0 <- datatraining[sample(1:nrow(datatraining), 3778, replace = FALSE), ]
View(dataset_2)
total <- rbind(total, data_datatraining_0)
View(total)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
data_datatraining_0 <- datatraining[sample(1:nrow(datatraining), 3778, replace = FALSE), ]
View(dataset_2)
data_datatraining_0 <- datatraining[sample(1:nrow(datatraining$Occupancy == "0"), 3778, replace = FALSE), ]
View(dataset_2)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
test = datatraining[datatraining$Occupancy == "0", ]
data_datatraining_0 <- datatraining[sample(1:nrow(test), 3778, replace = FALSE), ]
View(data_datatraining_0)
total <- rbind(total, data_datatraining_0)
View(total)
View(test)
View(data_datatraining_0)
data_datatraining_1 <- datatraining[datatraining$Occupancy == "1", ]
data_datatest2_1 <- datatest2[datatest2$Occupancy == "1", ]
total <- rbind(data_datatraining_1, data_datatest2_1)
View(total)
test = datatraining[datatraining$Occupancy == "0", ]
data_datatraining_0 <- test[sample(1:nrow(test), 3778, replace = FALSE), ]
View(data_datatraining_0)
total <- rbind(total, data_datatraining_0)
View(total)
write.csv(total, "dataset_balanced.csv")
datatest <- read.csv("C:/Users/Utente/Desktop/datatest.txt")
View(datatest)
write.csv(datatest, "datatest.csv")
View(datatest)
data_complete <- read.csv("data_complete.csv", header=TRUE)
data_complete <- read.csv("data_complete.csv", header=TRUE)
data_complete <- read.csv("../data_complete.csv", header=TRUE)
data_complete <- read.csv("/data_complete.csv", header=TRUE)
data_complete <- read.csv("/dataset/data_complete.csv", header=TRUE)
data_complete <- read.csv("~/GitHub/SDA/dataset/data_complete.csv")
View(data_complete)
data_complete <- read.csv("/dataset/data_complete.csv", header=TRUE)
load("~/GitHub/SDA/Prova_SDA.R")
View(data_complete)
head(data_complete)
names(data_complete)
View(data_complete)
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
attach(data_complete)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
library(corrplot)
library(caTools)
library(tidyverse)
library(caret)
library(ISLR)
library(MASS)
library(boot)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
combined_model_1 <- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + urban_metric*fuel_cost_6000_miles*extra_urban_metric*combined_metric + noise_level, data = tr_s)
combined_model_2<- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + fuel_cost_6000_miles*combined_metric + noise_level, data = tr_s)
combined_model_3<- lm(co2_emission ~ year + transmission_type +
fuel_type + fuel_cost_6000_miles*combined_metric + noise_level, data = tr_s)
car::vif(combined_model_1)
car::vif(combined_model_2)
car::vif(combined_model_3)
library(stringr)
boot.fn=function(data,index){
return(coef(lm(overall~recommended+seat_comfort+cabin_service+food_bev+entertainment+ground_service
+wifi_connectivity+value_for_money, data = data,subset=index)))
}
n = nrow(tr_s_outliers)
boot.fn(tr_s_outliers, 1:n)
boxplot(tr_s)$co2_emission
##metodo IQR per trovare gli outlier:
## restituzione del 25 esimo e 75 esimo percentile del set di dati
Q <- quantile(tr_s$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(tr_s$engine_capacity)
## ci calcoliamo gli intervalli oltre i quali tutti i punti sono outlier
up <-  Q[2]+1*iqr # Upper Range
low<- Q[1]-1*iqr # Lower Range
# ==============================================================
#ELIMINAZIONE OUTLIER
# ==============================================================
tr_s_outliers<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(tr_s_outliers)$co2_emission
Q <- quantile(tr_s_outliers$fuel_cost_6000_miles, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(tr_s_outliers$fuel_cost_6000_miles)
up <-  Q[2]+iqr # Upper Range
low<- Q[1]-iqr # Lower Range
tr_s_outliers<- subset(tr_s_outliers, tr_s_outliers$fuel_cost_6000_miles> low & tr_s_outliers$fuel_cost_6000_miles< up)
boxplot(tr_s_outliers)$co2_emission
Q <- quantile(tr_s_outliers$noise_level, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(tr_s_outliers$noise_level)
up <-  Q[2]+iqr # Upper Range
low <- Q[1]-iqr # Lower Range
tr_s_outliers<- subset(tr_s_outliers, tr_s_outliers$noise_level> low & tr_s_outliers$noise_level< up)
boxplot(tr_s_outliers)$co2_emission
model_without_outliers <- lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_without_outliers)
boot.fn(tr_s_outliers, 1:n)
boot.fn=function(data,index){
return(coef(lm(co2_emission~year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data = data,subset=index)))
}
n = nrow(tr_s_outliers)
boot.fn(tr_s_outliers, 1:n)
boot.fn(merComplete,sample(1:n, 79576,replace=T))
boot.fn(merComplete,sample(1:n, 79576,replace=T))
# Boot estimate is not deterministic
boot.fn(tr_s_outliers,sample(1:n, 79576,replace=T))
boot.fn(tr_s_outliers,sample(1:n, 79576,replace=T))
# We use the boot() function to compute the standard errors
# of 1,000 bootstrap estimates for the intercept and slope terms.
b = boot(tr_s_outliers ,boot.fn ,1000)
s = summary(lm(fit.linear, data = tr_s_outliers))
# Take all std. errors of the bootstrap estimate
x <- capture.output(b)
x <- str_extract(x, "^t[0-9.]+.*$")
x <- x[!is.na(x)]
se <- as.numeric(unlist(str_extract_all(x, '[0-9.]+$')))
# Take all std. errors of the linear model
c = s$coefficients[ ,2]
c = as.numeric(c)
cat("\nDifference between no-Transformation Std.errors:\n",c - se,"\n")
boot.fn(tr_s_outliers,sample(1:n, 79576,replace=T))
boot.fn(tr_s_outliers,sample(1:n, 79576,replace=T))
b = boot(tr_s_outliers ,boot.fn ,1000)
s = summary(lm(fit.linear, data = tr_s_outliers))
model_validation
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
confint(model_validation, level=.95)
s = summary(lm(model_validation, data = tr_s_outliers))
x <- capture.output(b)
x <- str_extract(x, "^t[0-9.]+.*$")
x <- x[!is.na(x)]
se <- as.numeric(unlist(str_extract_all(x, '[0-9.]+$')))
c = s$coefficients[ ,2]
c = as.numeric(c)
cat("\nDifference between no-Transformation Std.errors:\n",c - se,"\n")
co2_emission
tr_s$co2_emission
cat("\nDifference between no-Transformation Std.errors:\n",c - se,"\n")
setwd("~/GitHub/SDA")
library(corrplot)
library(caTools)
library(tidyverse)
library(caret)
library(ISLR)
library(MASS)
library(boot)
library(stringr)
data_complete <- read.csv("dataset/data_complete.csv", header=TRUE)
head(data_complete)
names(data_complete)
attach(data_complete)
my_data <- data_complete[,c(3,7,8,9,10,11,12,13,14,15,16)]
split = sample.split(my_data$co2_emission, SplitRatio = 0.8)
tr_s = subset(my_data, split == TRUE)
t_s = subset(my_data, split == FALSE)
combined_model_1 <- lm(co2_emission ~ year + euro_standard + transmission_type +
fuel_type + urban_metric*fuel_cost_6000_miles*extra_urban_metric*combined_metric + noise_level, data = tr_s)
combined_model_1$coefficients
combined_model_4<- lm(co2_emission ~ year + transmission_type +
fuel_type + fuel_cost_6000_miles + noise_level, data = tr_s)
combined_model_4<- lm(co2_emission ~ year*transmission_type +
fuel_type + fuel_cost_6000_miles + noise_level, data = tr_s)
combined_model_4<- lm(co2_emission ~ year+transmission_type*
fuel_type + fuel_cost_6000_miles + noise_level, data = tr_s)
car::vif(combined_model_4)
summary(combined_model_4)
plot(co2_emission, year)
abline(lm(co2_emission~year), col="red")
lines(lowess(co2_emission,year), col="blue")
plot(co2_emission, noise_level)
abline(lm(co2_emission~noise_level), col="red")
lines(lowess(co2_emission,noise_level), col="blue")
plot(co2_emission, year)
abline(lm(co2_emission~year), col="red")
lines(lowess(co2_emission,year), col="blue")
plot(co2_emission, euro_standard)
abline(lm(co2_emission~euro_standard), col="red")
lines(lowess(co2_emission,euro_standard), col="blue")
plot(co2_emission, transmission_type)
abline(lm(co2_emission~transmission_type), col="red")
lines(lowess(co2_emission,transmission_type), col="blue")
plot(co2_emission, engine_capacity)
abline(lm(co2_emission~engine_capacity), col="red")
lines(lowess(co2_emission,engine_capacity), col="blue")
plot(co2_emission, fuel_type)
abline(lm(co2_emission~fuel_type), col="red")
lines(lowess(co2_emission,fuel_type), col="blue")
plot(co2_emission, urban_metric)
abline(lm(co2_emission~urban_metric), col="red")
lines(lowess(co2_emission,urban_metric), col="blue")
plot(co2_emission, extra_urban_metric)
abline(lm(co2_emission~extra_urban_metric), col="red")
lines(lowess(co2_emission,extra_urban_metric), col="blue")
plot(co2_emission, combined_metric)
abline(lm(co2_emission~combined_metric), col="red")
lines(lowess(co2_emission,combined_metric), col="blue")
plot(co2_emission, noise_level)
abline(lm(co2_emission~noise_level), col="red")
lines(lowess(co2_emission,noise_level), col="blue")
plot(co2_emission, fuel_cost_6000_miles)
abline(lm(co2_emission~fuel_cost_6000_miles), col="red")
lines(lowess(co2_emission,fuel_cost_6000_miles), col="blue")
4) Outliers:
# ==============================================================
# OUTLIERS: Analisi ed Eliminazione
# ==============================================================
# L'analisi si effettua mediante l'utilizzo dei boxplot, i punti al di fuori del box sono considerati outliers (sotto determinate condizioni -> CODICE LUCA)
plot.new()
boxplot(tr_s)$co2_emission
##metodo IQR per trovare gli outlier:
## restituzione del 25 esimo e 75 esimo percentile del set di dati
Q <- quantile(tr_s$engine_capacity, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(tr_s$engine_capacity)
## ci calcoliamo gli intervalli oltre i quali tutti i punti sono outlier
up <-  Q[2]+1*iqr # Upper Range
low<- Q[1]-1*iqr # Lower Range
# ==============================================================
#ELIMINAZIONE OUTLIER
# ==============================================================
tr_s_outliers<- subset(tr_s, tr_s$engine_capacity> low & tr_s$engine_capacity< up)
boxplot(tr_s_outliers)$co2_emission
Q <- quantile(tr_s_outliers$fuel_cost_6000_miles, probs=c(.25, .75), na.rm = FALSE)
##differenza del 75 esimo e del 25esimo percentile
iqr <- IQR(tr_s_outliers$fuel_cost_6000_miles)
up <-  Q[2]+iqr # Upper Range
low<- Q[1]-iqr # Lower Range
tr_s_outliers<- subset(tr_s_outliers, tr_s_outliers$fuel_cost_6000_miles> low & tr_s_outliers$fuel_cost_6000_miles< up)
boxplot(tr_s_outliers)$co2_emission
Q <- quantile(tr_s_outliers$noise_level, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(tr_s_outliers$noise_level)
up <-  Q[2]+iqr # Upper Range
low <- Q[1]-iqr # Lower Range
tr_s_outliers<- subset(tr_s_outliers, tr_s_outliers$noise_level> low & tr_s_outliers$noise_level< up)
boxplot(tr_s_outliers)$co2_emission
model_without_outliers <- lm(co2_emission ~ ., data = tr_s_outliers)
summary(model_without_outliers)
plot(tr_s_outliers$co2_emission, tr_s_outliers$combined_metric)
plot(tr_s_outliers$co2_emission, tr_s_outliers$fuel_cost_6000_miles)
plot(tr_s_outliers$co2_emission, tr_s_outliers$engine_capacity)
plot(tr_s_outliers$co2_emission, tr_s_outliers$year)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
car::vif(model_without_outliers)
# DOPO LE RIFLESSIONI: sono stati eliminati i regressori che presentano un VIF oltre i 10 e che sono in correlazione con altri regressori con VIF minore di 10.
model_reduced_collinearity <- lm(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles  + noise_level, data = tr_s_outliers)
summary(model_reduced_collinearity)
confint(model_reduced_collinearity, level=.95)
res <- cor(my_data, use="pairwise.complete.obs")
round(res, 2)
dev.new()
plot.new()
dev.off()
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
step.model <- stepAIC(model_reduced_collinearity, direction = "both", scope = formula(model_reduced_collinearity), trace = FALSE)
summary(step.model)
step.model$anova
confint(step.model, level=.95)
# ===========================================================
train.control <- trainControl(method = "cv", number = 10)
model_validation <- train(co2_emission ~ year + euro_standard + transmission_type + engine_capacity +
fuel_type + fuel_cost_6000_miles + noise_level, data = tr_s_outliers, method = "lm",
trControl = train.control)
summary(model_validation)
confint(model_validation, level=.95)
